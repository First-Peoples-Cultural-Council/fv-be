name: Build FV-BE
on:
  push:
    branches:
      - dev
      - main
    tags:
      - 'r-*'
  pull_request:
    branches:
      - dev
      - main

jobs:
  pytest:
    name: pytest
    runs-on: ubuntu-22.04
    if: ((github.ref == 'refs/heads/dev') || (github.base_ref == 'main') || (github.base_ref == 'dev'))
    strategy:
      matrix:
        python-version: [ "3.13.2" ]  # Keep this in sync with the image in our Dockerfile
        group: [ 1, 2, 3, 4, 5 ]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: test_fv_be
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.debug.txt ]; then pip install -r requirements.debug.txt; fi
      - name: Setup ffmpeg (with retries)
        uses: ./.github/workflows/setup-ffmpeg
        id: setup-ffmpeg
      - name: Run Pytest
        working-directory: ./firstvoices
        env:
          ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest --cache-clear --cov --cov-config=.coveragerc --splits 5 --group ${{ matrix.group }}
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          include-hidden-files: true
          name: coverage${{ matrix.group }}
          path: firstvoices/.coverage

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-22.04
    needs: pytest
    if: ((github.ref == 'refs/heads/dev') || (github.base_ref == 'main') || (github.base_ref == 'dev'))
    strategy:
      matrix:
        python-version: [ "3.13.2" ]  # Keep this in sync with the image in our Dockerfile
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.sonarcov.txt
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Run coverage
        run: |
          coverage combine ./coverage*/.coverage*
          coverage report --fail-under=75
          coverage xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  set-environment:
    needs: sonarcloud
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "environment=preprod" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/r-.* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
          fi

  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    needs: set-environment
    uses: First-Peoples-Cultural-Council/fv-be/.github/workflows/build-and-deploy.yml@dev
    with:
      environment: ${{ needs.set-environment.outputs.env }}
    secrets:
      FPCC_AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
      FPCC_AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
      FPCC_DEFAULT_AWS_REGION: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
      FV_CLUSTER_NAME: ${{ secrets.FV_CLUSTER_NAME }}
      TEKTON_NAMESPACE: ${{ secrets.TEKTON_NAMESPACE }}
      TEKTON_INTERCEPTOR_NAME: ${{ secrets.TEKTON_INTERCEPTOR_NAME }}
      ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
      PULL_CONFIG_SECRET: ${{ secrets.PULL_CONFIG_SECRET }}
      FPCC_DEFAULT_ECR_URI: ${{ secrets.FPCC_DEFAULT_ECR_URI }}
      DEPLOYMENT_NAMESPACE: ${{ secrets.DEPLOYMENT_NAMESPACE }}
      HELM_CHART_NAME: ${{ secrets.HELM_CHART_NAME }}

  deploy-preprod-prod:
    if: (github.ref == 'refs/heads/main') || ((github.ref_type == 'tag') && (startsWith(github.ref_name, 'r-')))
    needs: set-environment
    uses: First-Peoples-Cultural-Council/fv-be/.github/workflows/build-and-deploy.yml@dev
    with:
      environment: ${{ needs.set-environment.outputs.env }}
    secrets:
      FPCC_AWS_ACCESS_KEY_ID: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
      FPCC_AWS_SECRET_ACCESS_KEY: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
      FPCC_DEFAULT_AWS_REGION: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
      FV_CLUSTER_NAME: ${{ secrets.FV_CLUSTER_NAME }}
      TEKTON_NAMESPACE: ${{ secrets.TEKTON_NAMESPACE }}
      TEKTON_INTERCEPTOR_NAME: ${{ secrets.TEKTON_INTERCEPTOR_NAME }}
      ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
      PULL_CONFIG_SECRET: ${{ secrets.PULL_CONFIG_SECRET }}
      FPCC_DEFAULT_ECR_URI: ${{ secrets.FPCC_DEFAULT_ECR_URI }}
      DEPLOYMENT_NAMESPACE: ${{ secrets.DEPLOYMENT_NAMESPACE }}
      HELM_CHART_NAME: ${{ secrets.HELM_CHART_NAME }}
