name: Build FV-BE
on:
  push:
    branches:
      - dev
      - main
    tags:
      - 'r-*'
  pull_request:
    branches:
      - dev
      - main

jobs:
  pytest:
    name: pytest
    runs-on: ubuntu-22.04
    if: ((github.ref == 'refs/heads/dev') || (github.base_ref == 'main') || (github.base_ref == 'dev'))
    strategy:
      matrix:
        python-version: [ "3.12.2" ]  # We should keep this in sync with the docker image we run on
        group: [ 1, 2, 3, 4, 5 ]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: test_fv_be
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.debug.txt ]; then pip install -r requirements.debug.txt; fi
      - name: Setup ffmpeg (with retries)
        uses: ./.github/workflows/setup-ffmpeg
        id: setup-ffmpeg
      - name: Run Pytest
        working-directory: ./firstvoices
        env:
          ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest --cache-clear --cov --cov-config=.coveragerc --splits 5 --group ${{ matrix.group }}
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          include-hidden-files: true
          name: coverage${{ matrix.group }}
          path: firstvoices/.coverage

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-22.04
    needs: pytest
    if: ((github.ref == 'refs/heads/dev') || (github.base_ref == 'main') || (github.base_ref == 'dev'))
    strategy:
      matrix:
        python-version: [ "3.12.2" ]  # We should keep this in sync with the docker image we run on
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.sonarcov.txt
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Run coverage
        run: |
          coverage combine ./coverage*/.coverage*
          coverage report --fail-under=75
          coverage xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  deploy_with_tekton:
    name: Monitor Dev Deployment
    environment: dev
    runs-on: ubuntu-22.04
    if: ((github.ref == 'refs/heads/dev') && (github.event_name != 'pull_request') && (github.actor != 'dependabot[bot]'))
    needs: sonarcloud
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Setup kubectl"
        run: |
          aws eks update-kubeconfig --name ${{  secrets.FV_CLUSTER_NAME  }} --region ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Setup RUNID"
        run: |
          echo "RUNID=$(kubectl -n ${{  secrets.TEKTON_NAMESPACE  }} get pr --sort-by=.status.completionTime -l triggers.tekton.dev/trigger=${{  secrets.TEKTON_INTERCEPTOR_NAME  }} | grep 'fv-be-webhook-' | tail -n 1 | cut -d ' ' -f 1)" >> "$GITHUB_ENV";
      - name: "Check RUNID Validity"
        run: |
          echo "The run ID associated with this deployment is ${{  env.RUNID  }}";
          if [${{  env.RUNID  }} == ""];
          then echo "No running pipeline associated with this branch, or the state of the pipeline is ambiguous.";
          exit 1;
          fi
      - name: "Monitor RUNID"
        timeout-minutes: 10
        run: |
          echo "The run ID associated with this deployment is ${{  env.RUNID  }}";
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo -e "\n========================================================================================================================================================================"
          echo "Running repo cloning..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP1  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP1  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          echo -e "\n========================================================================================================================================================================"
          echo "Running image build..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP2  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP2  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo -e "\n========================================================================================================================================================================"
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "Running URL adjustments for FV-BE..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP3  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP3  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo -e "\n========================================================================================================================================================================"
          echo "Running URL adjustments for FV-BE-Static..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP4  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP4  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo -e "\n========================================================================================================================================================================"
          echo "Running Helm-upgrade..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP5  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP5  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo -e "\n========================================================================================================================================================================"
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "Wrapping up pipeline monitoring";

  deploy_with_tekton_preprod:
    name: Monitor Preprod Deployment
    environment: preprod
    runs-on: ubuntu-22.04
    if: ((github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && (github.actor != 'dependabot[bot]'))
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Setup kubectl"
        run: |
          aws eks update-kubeconfig --name ${{  secrets.FV_CLUSTER_NAME  }} --region ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Setup RUNID"
        run: |
          echo "RUNID=$(kubectl -n ${{  secrets.TEKTON_NAMESPACE  }} get pr --sort-by=.status.completionTime -l triggers.tekton.dev/trigger=${{  secrets.TEKTON_INTERCEPTOR_NAME  }} | grep 'fv-be-webhook-' | head -n 1 |  cut -d ' ' -f 1)" >> "$GITHUB_ENV";
      - name: "Check RUNID Validity"
        run: |
          echo "The run ID associated with this deployment is ${{  env.RUNID  }}";
          if [${{  env.RUNID  }} == ""];
          then echo "No running pipeline associated with this branch, or the state of the pipeline is ambiguous.";
          exit 1;
          fi
      - name: "Monitor RUNID"
        timeout-minutes: 10
        run: |
          echo "The run ID associated with this deployment is ${{  env.RUNID  }}";
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "===================================================================================="
          echo "Running repo cloning..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP1  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP1  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          echo "===================================================================================="
          echo "Running image build..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP2  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP2  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
                    echo "Running URL adjustments for FV-BE..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP3  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP3  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          echo "Running URL adjustments for FV-BE-Static..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP4  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP4  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          echo "Running Helm-upgrade..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP5  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP5  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "Wrapping up pipeline monitoring";

  deploy_with_tekton_prod:
    name: Monitor Prod Deployment
    environment: prod
    runs-on: ubuntu-22.04
    if: ((github.ref_type == 'tag') && (startsWith(github.ref_name, 'r-')) && (github.event_name != 'pull_request') && (github.actor != 'dependabot[bot]'))
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Setup kubectl"
        run: |
          aws eks update-kubeconfig --name ${{  secrets.FV_CLUSTER_NAME  }} --region ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Setup RUNID"
        run: |
          echo "RUNID=$(kubectl -n ${{  secrets.TEKTON_NAMESPACE  }} get pr --sort-by=.status.completionTime -l triggers.tekton.dev/trigger=${{  secrets.TEKTON_INTERCEPTOR_NAME  }} | grep 'fv-be-webhook-' | head -n 1 | cut -d ' ' -f 1)" >> "$GITHUB_ENV";
      - name: "Check RUNID Validity"
        run: |
          echo "The run ID associated with this deployment is ${{  env.RUNID  }}";
          if [${{  env.RUNID  }} == ""];
          then echo "No running pipeline associated with this branch, or the state of the pipeline is ambiguous.";
          exit 1;
          fi
      - name: "Monitor RUNID"
        timeout-minutes: 10
        run: |
          echo "The run ID associated with this deployment is ${{  env.RUNID  }}";
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "===================================================================================="
          echo "Running repo cloning..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP1  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP1  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          echo "===================================================================================="
          echo "Running image build..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP2  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP2  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "Running URL adjustments for FV-BE..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP3  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP3  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          echo "Running URL adjustments for FV-BE-Static..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP4  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP4  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          echo "Running Helm-upgrade..."
          kubectl wait --for=condition=Succeeded TaskRun ${{  env.RUNID  }}-${{  vars.PIPELINE_STEP5  }} --timeout=300s -n ${{  secrets.TEKTON_NAMESPACE  }}
          kubectl logs pod/${{  env.RUNID  }}-${{  vars.PIPELINE_STEP5  }}-pod -n ${{  secrets.TEKTON_NAMESPACE  }}
          sleep 1;
          echo "===================================================================================="
          kubectl get events -n ${{  secrets.TEKTON_NAMESPACE  }} | grep "${{  env.RUNID  }}";
          echo "Wrapping up pipeline monitoring";
  image_scan:
    name: Check Image for vulnerabilities in Dev
    environment: dev
    runs-on: ubuntu-22.04
    needs: deploy_with_tekton
    if: ((github.ref == 'refs/heads/dev') && (github.event_name != 'pull_request'))
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Run image scan"
        run: |
          aws ecr start-image-scan --repository-name ${{ secrets.ECR_REPO_NAME }} --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }}
          aws ecr wait image-scan-complete --repository-name ${{ secrets.ECR_REPO_NAME }} --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }}
          echo "List of findings are below"
          aws ecr describe-image-scan-findings --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }} --repository-name ${{ secrets.ECR_REPO_NAME }} | jq .imageScanFindings.findings
          aws ecr describe-image-scan-findings --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }} --repository-name ${{ secrets.ECR_REPO_NAME }} | if [[ $(grep  '\"severity\": \"CRITICAL\"') ]]; then echo "CRTICAL Vulnerabilities present in this deployment"; exit 1; fi
          aws ecr describe-image-scan-findings --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }} --repository-name ${{ secrets.ECR_REPO_NAME }} | if [[ $(grep  '\"severity\": \"HIGH\"') ]]; then echo "HIGH Vulnerabilities present in this deployment"; exit 1; fi
