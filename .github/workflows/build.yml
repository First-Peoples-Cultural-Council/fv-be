name: Build
on:
  push:
  pull_request:
    branches:
      - main

jobs:

  pytest:
    name: pytest
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version: [ "3.11.4" ]
        group: [ 1, 2, 3, 4, 5 ]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: test_fv_be
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.debug.txt ]; then pip install -r requirements.debug.txt; fi
      - uses: FedericoCarboni/setup-ffmpeg@v3
        id: setup-ffmpeg
      - name: Run Pytest
        working-directory: ./firstvoices
        env:
          ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest --cov --cov-config=.coveragerc --splits 5 --group ${{ matrix.group }}
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage${{ matrix.group }}
          path: firstvoices/.coverage

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: pytest
    strategy:
      matrix:
        python-version: [ "3.11.4" ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.sonarcov.txt
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Run coverage
        run: |
          coverage combine coverage*/.coverage*
          coverage report --fail-under=75
          coverage xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  
  webhook: 
    name: Ping tekton webhook
    runs-on: ubuntu-latest 
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    steps: 
      - name: Invoke tekton hook
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: https://webhook-fv-be.eks.firstvoices.io
          webhook_secret: ${{ secrets.TEKTON_WEBHOOK_SECRET }}
          data: ${{  toJson(github.event)  }}
          verify_ssl: true
          
      # - name: Use curl to ping webhook
      #   run: | 
      #     curl --request POST --header "Content-Type: application/json" --header "X-GitHub-Event: custom-push" --data '${{ toJson(github.Event) }}' "https://webhook-fv-be.eks.firstvoices.io/"

  check_tekton_run:
    name: Check Tekton Run
    runs-on: ubuntu-latest
    needs: webhook
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
      - name: Setup kubectl & migrate
        env:
          NAMESPACE: 2023-03-fv-be-dev
          REGION: ca-central-1
          CLUSTER_NAME: firstvoices-eks
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
          kubectl get namespaces
