name: "Monitor Tekton Build"
description: "Monitors a Tekton pipeline run by detecting the latest PipelineRun and streaming logs for each step."

inputs:
  aws_region:
    required: true
  aws-access-key-id:
    required: true
  aws-secret-access-key:
    required: true
  cluster_name:
    required: true
  job_sort_order:
    required: true
  webhook_prefix:
    required: true
  tekton_namespace:
    required: true
  tekton_interceptor_name:
    required: true
  pipeline_step1:
    required: true
  pipeline_step2:
    required: true
  pipeline_step3:
    required: true
  pipeline_step4:
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Setup kubectl
      shell: bash
      run: |
        aws eks update-kubeconfig --name ${{ inputs.cluster_name }} --region ${{ inputs.aws_region }}

    - name: Setup RUNID
      shell: bash
      run: |
        SORT_CMD="${{ inputs.job_sort_order }}"
        PREFIX="${{ inputs.webhook_prefix }}"

        echo "Sorting jobs using: $SORT_CMD"
        echo "Filtering PipelineRuns with prefix: $PREFIX"

        RUNID=$(kubectl -n ${{ inputs.tekton_namespace }} get pr \
          --sort-by=.status.completionTime \
          -l triggers.tekton.dev/trigger=${{ inputs.tekton_interceptor_name }} \
          | grep "$PREFIX" \
          | $SORT_CMD -n 1 | awk '{print $1}')

        echo "Found RUNID: $RUNID"
        echo "RUNID=$RUNID" >> "$GITHUB_ENV"

    - name: Check RUNID Validity
      shell: bash
      run: |
        if [ -z "$RUNID" ]; then
          echo "No matching PipelineRun found. Aborting."
          exit 1
        else
          echo "RUNID is valid: $RUNID"
        fi

    - name: Monitor RUNID
      shell: bash
      run: |
        echo "üîç Monitoring Tekton build for RUNID: $RUNID"
        echo "===================================================================================="

        for STEP in ${{ inputs.pipeline_step1 }} ${{ inputs.pipeline_step2 }} ${{ inputs.pipeline_step3 }} ${{ inputs.pipeline_step4 }}
        do
          echo "‚ñ∂ Waiting for task: $STEP"
          kubectl wait --for=condition=Succeeded TaskRun "$RUNID-$STEP" --timeout=300s -n ${{ inputs.tekton_namespace }}

          echo "Logs for task: $STEP"
          kubectl logs pod/"$RUNID-$STEP-pod" -n ${{ inputs.tekton_namespace }}

          echo "------------------------------------------------------------------------------------"
          sleep 1
        done

        echo "All pipeline steps completed."
        kubectl get events -n ${{ inputs.tekton_namespace }} | grep "$RUNID" || echo "No events found for $RUNID"
