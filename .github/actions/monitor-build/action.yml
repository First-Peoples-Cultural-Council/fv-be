name: "Monitor tekton build"
description: "Monitor tekton build"

inputs:
  aws_region:
    required: true
  aws-access-key-id:
    required: true
  aws-secret-access-key:
    required: true
  cluster_name:
    required: true
  job_sort_order:
    required: true
  tekton_namespace:
    required: true
  tekton_interceptor_name:
    required: true
  pipeline_step1:
    required: true
  pipeline_step2:
    required: true
  pipeline_step3:
    required: true
  pipeline_step4:
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{  inputs.aws_region }}
    - name: "Setup kubectl"
      shell: bash
      run: |
        aws eks update-kubeconfig --name ${{  inputs.cluster_name  }} --region ${{  inputs.aws_region }}
    - name: "Setup RUNID"
      shell: bash
      run: |
        SORT_CMD="${{ inputs.job_sort_order }}"
        RUNID=$(kubectl -n ${{ inputs.tekton_namespace }} get pr \
          --sort-by=.status.completionTime \
          -l triggers.tekton.dev/trigger=${{ inputs.tekton_interceptor_name }} \
          | grep 'fv-be-webhook-' \
          | $SORT_CMD -n 1 | awk '{print $1}')
        echo "Found RUNID: $RUNID"
        echo "RUNID=$RUNID" >> "$GITHUB_ENV"
    - name: "Check RUNID Validity"
      shell: bash
      run: |
        echo "The run ID associated with this deployment is $RUNID";
        if [ -z "$RUNID" ]; then
          echo "No running pipeline associated with this branch, or the state of the pipeline is ambiguous.";
          exit 1;
        fi
    - name: "Monitor RUNID"
      shell: bash
      run: |
        echo "The run ID associated with this deployment is $RUNID";
        kubectl get events -n ${{  inputs.tekton_namespace }} | grep "$RUNID";
        echo "===================================================================================="
        echo "Running repo cloning..."
        kubectl wait --for=condition=Succeeded TaskRun $RUNID-${{  inputs.pipeline_step1 }} --timeout=300s -n ${{  inputs.tekton_namespace }}
        kubectl logs pod/$RUNID-${{  inputs.pipeline_step1 }}-pod -n ${{  inputs.tekton_namespace }}
        echo "===================================================================================="
        echo "Running image build..."
        kubectl wait --for=condition=Succeeded TaskRun $RUNID-${{  inputs.pipeline_step2 }} --timeout=300s -n ${{  inputs.tekton_namespace }}
        kubectl logs pod/$RUNID-${{  inputs.pipeline_step2 }}-pod -n ${{  inputs.tekton_namespace }}
        sleep 1;
        echo "===================================================================================="
        kubectl get events -n ${{  inputs.tekton_namespace }} | grep "$RUNID";
        echo "Running URL adjustments for FV-BE..."
        kubectl wait --for=condition=Succeeded TaskRun $RUNID-${{  inputs.pipeline_step3 }} --timeout=300s -n ${{  inputs.tekton_namespace }}
        kubectl logs pod/$RUNID-${{  inputs.pipeline_step3 }}-pod -n ${{  inputs.tekton_namespace }}
        sleep 1;
        echo "===================================================================================="
        echo "Running URL adjustments for FV-BE-Static..."
        kubectl wait --for=condition=Succeeded TaskRun $RUNID-${{  inputs.pipeline_step4 }} --timeout=300s -n ${{  inputs.tekton_namespace }}
        kubectl logs pod/$RUNID-${{  inputs.pipeline_step4 }}-pod -n ${{  inputs.tekton_namespace }}
        sleep 1;
        echo "===================================================================================="
        kubectl get events -n ${{  inputs.tekton_namespace }} | grep "$RUNID";
        echo "Wrapping up pipeline monitoring";
