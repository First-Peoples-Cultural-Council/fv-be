name: "Scan"
description: "Scan container images, generate CycloneDX SBOMs, and print Python dependency tree"

inputs:
  env:
    required: true
  aws_region:
    required: true
  aws_account:
    required: true
  aws-access-key-id:
    required: true
  aws-secret-access-key:
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Login to ECR
      shell: bash
      run: |
        aws ecr get-login-password --region "${{ inputs.aws_region }}" | \
        docker login --username AWS --password-stdin "${{ inputs.aws_account }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com"

    - name: Install Trivy
      shell: bash
      run: |
        if ! command -v trivy &> /dev/null; then
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        fi

    - name: Ensure Python 3, pip, and dependencies
      shell: bash
      run: |
        command -v python3 || sudo apt-get install -y python3
        command -v pip3 || sudo apt-get install -y python3-pip
        [ -f requirements.txt ] && pip3 install -r requirements.txt || echo "No requirements.txt found"
        pip3 install pipdeptree

    - name: Scan images and generate CycloneDX SBOMs
      shell: bash
      run: |
        set -euo pipefail

        FILE="./downloads/Values.${{ inputs.env }}.yaml"
        [[ -f "$FILE" ]] || { echo "$FILE not found"; exit 1; }

        IMAGES=$(grep -oE '[^ ]+@sha256:[a-f0-9]+' "$FILE")
        echo "TRIVY_FAILED=0" >> $GITHUB_ENV

        for IMAGE in $IMAGES; do
          FILENAME=$(echo "$IMAGE" | tr '/:@' '___')

          echo "🔍 Scanning $IMAGE"
          echo "============================================================"

          trivy image --scanners vuln,secret,config,license \
            --format table \
            --ignore-unfixed \
            --skip-dirs /proc,/sys \
            --timeout 10m \
            --severity HIGH,CRITICAL \
            --vuln-type os,library "$IMAGE" || echo "TRIVY_FAILED=1" >> $GITHUB_ENV

          trivy image --scanners vuln,secret,config,license \
            --format cyclonedx \
            --ignore-unfixed \
            --skip-dirs /proc,/sys \
            --timeout 10m \
            --severity HIGH,CRITICAL \
            --vuln-type os,library "$IMAGE" > "${FILENAME}_scan_cbom.json"

          echo "Scan complete for $IMAGE"
          echo "============================================================"
        done

    - name: Print CycloneDX Dependency Trees
      shell: bash
      run: |
        set -euo pipefail

        FILE="./downloads/Values.${{ inputs.env }}.yaml"
        IMAGES=$(grep -oE '[^ ]+@sha256:[a-f0-9]+' "$FILE")

        for IMAGE in $IMAGES; do
          FILENAME=$(echo "$IMAGE" | tr '/:@' '___')
          echo "Dependency Tree from SBOM for $IMAGE:"
          python3 ./tree.py "${FILENAME}_scan_cbom.json"
          echo
        done

    - name: Print Python dependency tree (pipdeptree)
      shell: bash
      run: |
        echo "Python Dependency Tree:"
        pipdeptree --warn silence || echo "pipdeptree failed to generate tree"

    - name: Fail if vulnerabilities were found
      shell: bash
      run: |
        if [[ "$TRIVY_FAILED" == "1" ]]; then
          echo "Vulnerabilities were detected in one or more images."
          echo "🔧 Please address the vulnerabilities to fix this job."
          exit 1
        fi
        echo "No HIGH or CRITICAL vulnerabilities detected."
