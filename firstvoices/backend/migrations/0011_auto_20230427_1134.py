# Generated by Django 4.1.7 on 2023-04-27 18:34
# Migration file to load initial data. Sets null to true on the created and last
# modified fields for the AppJson and PartsOfSpeech models, loads the default
# fixtures, and updates the created and last_updated fields for the newly added
# entries. Null is set back to false in the next migration.
#
# The loaddata command uses the most up-to-date models during deserialization,
# which can cause migration failures. To fix this, the historical model must be
# used. See both answers by @djvg and @Rockallite in the following link:
# Ref: https://stackoverflow.com/questions/25960850/

import backend.models.part_of_speech
from django.db import migrations, models
from django.apps import apps as current_apps
from django.core.serializers import base, python
from django.core.management import call_command
from django.utils import timezone
from django.db.models import Q


def load_default_fixtures(apps, schema_editor):
    old_get_model = python._get_model

    def _get_model(model_identifier):
        try:
            """ add natural_key method from current model to historical model """
            historical_model = apps.get_model(model_identifier)
            current_model = current_apps.get_model(model_identifier)
            if hasattr(current_model, 'natural_key'):
                historical_model.natural_key = current_model.natural_key
            return historical_model
        except (LookupError, TypeError):
            raise base.DeserializationError(
                "Invalid model identifier: '%s'" % model_identifier)

    python._get_model = _get_model

    try:
        call_command('loaddata', 'appjson-defaults.json',
                     app_label="backend")
        call_command('loaddata', 'default_g2p_config.json',
                     app_label="backend")
        call_command('loaddata', 'partsOfSpeech_initial.json',
                     app_label="backend")
    finally:
        python._get_model = old_get_model


def populate_dates(apps, schema_editor):
    appjson = apps.get_model('backend', 'appjson')
    for item in appjson.objects.filter(
        Q(key='default_site_menu') | Q(key='default_g2p_config')):
        item.created = timezone.now()
        item.last_modified = timezone.now()
        item.save()

    partsofspeech = apps.get_model('backend', 'partofspeech')
    for item in partsofspeech.objects.filter(
        Q(created=None) | Q(last_modified=None)):
        item.created = timezone.now()
        item.last_modified = timezone.now()
        item.save()


class Migration(migrations.Migration):
    dependencies = [
        ("backend", "0010_rename_uuid_dictionaryentrylink_id_and_more"),
    ]

    operations = [
        migrations.AlterModelManagers(
            name="partofspeech",
            managers=[
                ("objects", backend.models.part_of_speech.ParentManager()),
            ],
        ),
        migrations.AlterField(
            model_name="appjson",
            name="created",
            field=models.DateTimeField(auto_now_add=True, db_index=True,
                                       null=True),
        ),
        migrations.AlterField(
            model_name="appjson",
            name="last_modified",
            field=models.DateTimeField(auto_now=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name="partofspeech",
            name="created",
            field=models.DateTimeField(auto_now_add=True, db_index=True,
                                       null=True),
        ),
        migrations.AlterField(
            model_name="partofspeech",
            name="last_modified",
            field=models.DateTimeField(auto_now=True, db_index=True, null=True),
        ),
        migrations.RunPython(load_default_fixtures),
        migrations.RunPython(populate_dates),
    ]
